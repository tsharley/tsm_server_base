#!/bin/bash
# set variables
declare -r TRUE=0
declare -r FALSE=1
declare -r PASSWD_FILE=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'

##################################################################
# Purpose: Converts a string to lower case
# Arguments:
#   $1 -> String to convert to lower case
##################################################################
function to_lower() {
    local str="$@"
    local output
    output=$(tr '[A-Z]' '[a-z]'<<<"${str}")
    echo $output
}


##################################################################
# Purpose: Display an error message and die
# Arguments:
#   $1 -> Message
#   $2 -> Exit status (optional)
##################################################################
function die() {
    local m="$1"	# message
    local e=${2-1}	# default exit status 1
    echo "${RED}$m${STD}"
    exit $e
}


##################################################################
# Purpose: Return true if script is executed by the root user
# Arguments: none
# Return: True or False
##################################################################
function is_root() {
   [ "$(id -u)" -eq 0 ] && return $TRUE || return $FALSE
}


##################################################################
# Purpose: Return true if $user exits in /etc/passwd
# Arguments: $1 (username) -> Username to check in /etc/passwd
# Return: True or False
##################################################################
function user_exits() {
    local u="$1"
    grep -q "^${u}" $PASSWD_FILE && return $TRUE || return $FALSE
}


##################################################################
# Purpose: Grep the process list for a given process or pattern
# Arguments: $1 (regex) -> Process to check for in ps aux output
# Return: Line(s) containing the given process
##################################################################
function fproc() {
    ps aux | grep -v grep | grep -i -e VSZ -e $1
}
